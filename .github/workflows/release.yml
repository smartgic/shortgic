name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate tag format
      if: github.event_name == 'push'
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid tag format: $TAG"
          echo "Expected format: v1.0.0"
          exit 1
        fi
        echo "TAG=$TAG" >> $GITHUB_ENV

    - name: Set version from input
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV

    - name: Check if tag exists
      if: github.event_name == 'workflow_dispatch'
      run: |
        if git tag -l | grep -q "^${{ env.TAG }}$"; then
          echo "Tag ${{ env.TAG }} already exists"
          exit 1
        fi

    - name: Validate changelog
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "CHANGELOG.md not found"
          exit 1
        fi

        # Check if version is mentioned in changelog
        if ! grep -q "${{ env.TAG }}" CHANGELOG.md; then
          echo "Version ${{ env.TAG }} not found in CHANGELOG.md"
          exit 1
        fi

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx

    - name: Run tests
      run: |
        mkdir -p test-data
        python -m pytest tests/ -v --cov=app
      env:
        SHORTGIC_DATABASE_PATH: ./test-data/release-test.db

    - name: Build Docker image
      run: |
        docker build -t shortgic:release .

    - name: Test Docker image
      run: |
        mkdir -p test-data
        docker run -d --name shortgic-release-test \
          -p 8000:8000 \
          -v $(pwd)/test-data:/data \
          -e SHORTGIC_DATABASE_PATH=/data/release-test.db \
          shortgic:release

        sleep 10

        # Test API
        curl -f http://localhost:8000/ || exit 1

        RESPONSE=$(curl -s -X POST http://localhost:8000 \
          -H "Content-Type: application/json" \
          -d '{"target": "https://github.com/smartgic/shortgic"}')

        LINK=$(echo $RESPONSE | python -c "import sys, json; print(json.load(sys.stdin)['link'])")
        curl -f -L http://localhost:8000/$LINK || exit 1

        docker stop shortgic-release-test
        docker rm shortgic-release-test

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get tag name
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Create tag for manual release
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a ${{ env.TAG }} -m "Release ${{ env.TAG }}"
        git push origin ${{ env.TAG }}

    - name: Extract changelog for version
      run: |
        # Extract changelog section for this version
        awk "/^## \[${{ env.TAG }}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release-notes.md || echo "No changelog entry found" > release-notes.md

    - name: Generate release notes
      run: |
        echo "# Release ${{ env.TAG }}" > full-release-notes.md
        echo "" >> full-release-notes.md

        if [ -s release-notes.md ]; then
          cat release-notes.md >> full-release-notes.md
        else
          echo "## Changes" >> full-release-notes.md
          echo "" >> full-release-notes.md
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### Commits since $LAST_TAG:" >> full-release-notes.md
            git log --oneline $LAST_TAG..HEAD >> full-release-notes.md
          else
            echo "### All commits:" >> full-release-notes.md
            git log --oneline >> full-release-notes.md
          fi
        fi

        echo "" >> full-release-notes.md
        echo "## Docker Image" >> full-release-notes.md
        echo "" >> full-release-notes.md
        echo "\`\`\`bash" >> full-release-notes.md
        echo "docker pull ghcr.io/${{ github.repository }}:${{ env.TAG }}" >> full-release-notes.md
        echo "\`\`\`" >> full-release-notes.md
        echo "" >> full-release-notes.md
        echo "## Installation" >> full-release-notes.md
        echo "" >> full-release-notes.md
        echo "\`\`\`bash" >> full-release-notes.md
        echo "git clone https://github.com/${{ github.repository }}.git" >> full-release-notes.md
        echo "cd shortgic" >> full-release-notes.md
        echo "git checkout ${{ env.TAG }}" >> full-release-notes.md
        echo "docker-compose up -d" >> full-release-notes.md
        echo "\`\`\`" >> full-release-notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG }}
        name: Release ${{ env.TAG }}
        body_path: full-release-notes.md
        draft: false
        prerelease: ${{ contains(env.TAG, '-') }}
        generate_release_notes: true

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get tag name
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ env.TAG }}
          type=semver,pattern={{major}}.{{minor}},value=${{ env.TAG }}
          type=semver,pattern={{major}},value=${{ env.TAG }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [publish-docker]

    steps:
    - name: Get tag name
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-docker, security-scan]
    if: always()

    steps:
    - name: Get tag name
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Create release summary
      run: |
        echo "# Release ${{ env.TAG }} Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        echo "- Validation: ${{ needs.validate-release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build & Test: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Release: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Publish: ${{ needs.publish-docker.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Links" >> $GITHUB_STEP_SUMMARY
        echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ env.TAG }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Docker Image](https://github.com/${{ github.repository }}/pkgs/container/shortgic)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Quick Start" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8000:8000 -v ./data:/data ghcr.io/${{ github.repository }}:${{ env.TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
